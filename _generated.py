
import os
import psycopg2
import psycopg2.extras
import tabulate
from dotenv import load_dotenv

# DO NOT EDIT THIS FILE, IT IS GENERATED BY generator.py

def query():
    load_dotenv()

    user = os.getenv('USER')
    password = os.getenv('PASSWORD')
    dbname = os.getenv('DBNAME')

    conn = psycopg2.connect("dbname="+dbname+" user="+user+" password="+password,
                            cursor_factory=psycopg2.extras.DictCursor)
    cur = conn.cursor()
    cur.execute("SELECT * FROM sales")
    
    _global = []
    
    # Create the mf-structure to store groups and their aggregates
    groups = {}  # This will be our mf-structure

    # Process each row from the database
    for row in cur:
        # Create the grouping key
        key = (row['cust'], row['prod'])
        
        # If this group doesn't exist yet, initialize it
        if key not in groups:
            groups[key] = {
                'cust': row['cust'],
            'prod': row['prod'],
            'avg(quant)_sum': 0,  # For sum of quant
            'avg(quant)_count': 0,  # For count of quant
            'max(quant)': float('-inf'),  # For max of quant
        }
        
        # Update the aggregate values for this group
            groups[key]['avg(quant)_sum'] += row['quant']
        groups[key]['avg(quant)_count'] += 1
        groups[key]['max(quant)'] = max(groups[key]['max(quant)'], row['quant'])

    # Convert the mf-structure to result rows with computed aggregates
    result = []
    for key, group_data in groups.items():
        # Create a result row with the requested columns
        result_row = {
                'cust': group_data['cust'],
            'prod': group_data['prod'],
            'avg(quant)': group_data['avg(quant)_sum'] / group_data['avg(quant)_count'] if group_data['avg(quant)_count'] > 0 else 0,
            'max(quant)': group_data['max(quant)'],
        }
        result.append(result_row)

    _global = result
    
    
    return tabulate.tabulate(_global,
                        headers="keys", tablefmt="psql")

def main():
    print(query())
    
if "__main__" == __name__:
    main()
    